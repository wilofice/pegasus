Plan d'Organisation des Dossiers et Composants - Projet Pegasus
Ce document dÃ©finit la structure des rÃ©pertoires et les conventions de nommage pour l'ensemble du projet Pegasus.

1. Arborescence Globale du Projet
Le projet sera organisÃ© Ã  la racine dans un dossier principal pegasus/ qui contiendra trois sous-dossiers majeurs, chacun reprÃ©sentant un macro-composant de notre architecture :

pegasus/
â”œâ”€â”€ ðŸ“‚ backend/         # Le cerveau de Pegasus (API, logique mÃ©tier)
â”œâ”€â”€ ðŸ“‚ data_pipeline/   # Le script qui nourrit la mÃ©moire de Pegasus
â””â”€â”€ ðŸ“‚ frontend/        # L'application mobile/web avec laquelle vous interagissez

2. DÃ©tail du Dossier backend/
Ce dossier contient le serveur applicatif Ã©crit en Python avec FastAPI. Il gÃ¨re la logique de conversation et le moteur proactif.

backend/
â”œâ”€â”€ ðŸ“‚ api/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ chat_router.py          # GÃ¨re le endpoint /chat pour la conversation rÃ©active
â”‚   â””â”€â”€ analysis_router.py      # GÃ¨re le endpoint /webhook pour lancer l'analyse proactive
â”‚
â”œâ”€â”€ ðŸ“‚ core/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ orchestrator.py         # Le "chef d'orchestre" qui combine la requÃªte, le contexte et appelle le LLM
â”‚   â””â”€â”€ proactive_engine.py     # La logique du moteur d'analyse qui tourne en arriÃ¨re-plan
â”‚
â”œâ”€â”€ ðŸ“‚ services/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ llm_client.py           # Interface pour communiquer avec le service LLM externe (OpenAI/Anthropic)
â”‚   â””â”€â”€ vector_db_client.py     # Interface pour interroger la base de donnÃ©es vectorielle (ChromaDB)
â”‚
â”œâ”€â”€ ðŸ“„ main.py                   # Point d'entrÃ©e de l'application FastAPI, assemble les routeurs
â”œâ”€â”€ ðŸ“„ config.py                 # Fichier de configuration (clÃ©s d'API, URLs, etc.)
â”œâ”€â”€ ðŸ“„ Dockerfile                # Pour "emballer" le backend dans un conteneur
â””â”€â”€ ðŸ“„ requirements.txt          # Liste des dÃ©pendances Python

3. DÃ©tail du Dossier data_pipeline/
Ce dossier contient le script autonome qui traite les donnÃ©es brutes et alimente la base vectorielle.

data_pipeline/
â”œâ”€â”€ ðŸ“‚ source_data/              # Le dossier surveillÃ© oÃ¹ vous dÃ©posez vos fichiers bruts
â”‚   â””â”€â”€ .gitkeep                 # (Fichier vide pour que le dossier soit versionnÃ©)
â”‚
â”œâ”€â”€ ðŸ“‚ database/                 # Destination pour la base de donnÃ©es ChromaDB
â”‚   â””â”€â”€ .gitkeep
â”‚
â”œâ”€â”€ ðŸ“‚ logs/
â”‚   â””â”€â”€ pipeline.log             # Fichier de log pour tracer les opÃ©rations de traitement
â”‚
â”œâ”€â”€ ðŸ“„ pipeline.py               # Le script principal (surveillance, transcription, vectorisation)
â””â”€â”€ ðŸ“„ requirements.txt         # Liste des dÃ©pendances Python spÃ©cifiques Ã  ce pipeline

4. DÃ©tail du Dossier frontend/ (avec Flutter)
Ce dossier contient l'application Flutter Ã©crite en langage Dart. C'est l'interface visuelle et vocale de Pegasus.

frontend/
â”œâ”€â”€ ðŸ“‚ lib/                       # Le cÅ“ur du code source de l'application Flutter
â”‚   â”œâ”€â”€ ðŸ“‚ api/
â”‚   â”‚   â””â”€â”€ pegasus_api_client.dart   # Fonctions pour appeler le backend de Pegasus (via http ou dio)
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ“‚ models/
â”‚   â”‚   â””â”€â”€ message_model.dart      # ModÃ¨le de donnÃ©es pour un message de chat
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ“‚ providers/               # Gestion de l'Ã©tat (ex: avec Riverpod ou Provider)
â”‚   â”‚   â””â”€â”€ chat_provider.dart      # GÃ¨re l'Ã©tat de la conversation
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ“‚ screens/                 # Ã‰crans principaux de l'application
â”‚   â”‚   â”œâ”€â”€ chat_screen.dart        # L'Ã©cran principal de conversation
â”‚   â”‚   â””â”€â”€ settings_screen.dart    # Ã‰cran pour les futurs paramÃ¨tres
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ“‚ services/
â”‚   â”‚   â”œâ”€â”€ notification_service.dart # Configuration et gestion des notifications push (Firebase)
â”‚   â”‚   â””â”€â”€ voice_service.dart      # Logique pour le Speech-to-Text et Text-to-Speech
â”‚   â”‚
â”‚   â”œâ”€â”€ ðŸ“‚ widgets/                 # Composants UI (widgets) rÃ©utilisables
â”‚   â”‚   â”œâ”€â”€ message_bubble.dart     # Bulle d'affichage pour un message
â”‚   â”‚   â””â”€â”€ message_composer.dart   # Zone de saisie de texte et bouton micro
â”‚   â”‚
â”‚   â””â”€â”€ ðŸ“„ main.dart                 # Point d'entrÃ©e de l'application Flutter
â”‚
â”œâ”€â”€ ðŸ“‚ assets/                      # Pour les ressources statiques (images, polices)
â”‚   â””â”€â”€ â””â”€â”€ images/
â”‚
â”œâ”€â”€ ðŸ“„ pubspec.yaml                 # DÃ©pendances (packages) et configuration du projet Flutter
â””â”€â”€ ðŸ“„ README.md                   # Instructions pour lancer le projet frontend

Cette vision est maintenant complÃ¨te et cohÃ©rente. Chaque brique a sa place, et les technologies sont alignÃ©es avec l'objectif d'une application personnelle, sÃ©curisÃ©e et performante.

Nous avons donc tous les Ã©lÃ©ments nÃ©cessaires. Nous pouvons maintenant revenir en toute confiance Ã  l'Ã©tape suivante qui est l'Ã©criture du script pipeline.py dans le dossier data_pipeline/.