INFO:services.chat_orchestrator_factory:Creating Chat Orchestrator V2 with default services...
INFO:services.context_aggregator_factory:Creating Context Aggregator V2 with real services...
INFO:services.context_ranker:Context ranker initialized with strategy: ensemble
INFO:services.context_aggregator_v2:Context Aggregator V2 initialized with modern retrieval services
INFO:services.context_aggregator_factory:Context Aggregator V2 created successfully
INFO:services.chat_orchestrator_factory:Plugin manager created successfully
INFO:services.chat_orchestrator_v2:Chat Orchestrator V2 initialized with modern services
INFO:services.chat_orchestrator_factory:Chat Orchestrator V2 created successfully
INFO:services.chat_orchestrator_v2:Processing chat message for session 0bc80d48-281e-47d9-a8f7-f287434c8943: 'Sur quoi j’ai travaillé cette nuit ?...'
INFO:services.context_aggregator_v2:Starting context aggregation for query: 'Sur quoi j’ai travaillé cette nuit ?...'
INFO:watchfiles.main:1 change detected
INFO:httpx:HTTP Request: GET http://localhost:8001/api/v2/auth/identity "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: GET http://localhost:8001/api/v2/tenants/default_tenant "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: GET http://localhost:8001/api/v2/tenants/default_tenant/databases/default_database "HTTP/1.1 200 OK"
INFO:httpx:HTTP Request: GET http://localhost:8001/api/v2/heartbeat "HTTP/1.1 200 OK"
INFO:services.vector_db_client:Connected to ChromaDB at localhost:8001
INFO:sentence_transformers.SentenceTransformer:Load pretrained SentenceTransformer: all-MiniLM-L6-v2
INFO:httpx:HTTP Request: POST http://localhost:8001/api/v2/tenants/default_tenant/databases/default_database/collections "HTTP/1.1 200 OK"
INFO:services.vector_db_client:Initialized collection: pegasus_transcripts
INFO:httpx:HTTP Request: GET http://localhost:8001/api/v2/tenants/default_tenant/databases/default_database/collections/audio_transcripts "HTTP/1.1 200 OK"
INFO:services.chromadb_manager:Retrieved existing collection: audio_transcripts
INFO:services.retrieval.chromadb_retriever:ChromaDB retriever initialized with collection: audio_transcripts
INFO:services.neo4j_client:Successfully connected to Neo4j at bolt://localhost:7687
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT person_name IF NOT EXISTS FOR (e:Person) REQUIRE (e.name) IS UNIQUE` has no effect.} {description: `CONSTRAINT person_name FOR (e:Person) REQUIRE (e.name) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT person_name IF NOT EXISTS FOR (p:Person) REQUIRE p.name IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT person_name IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT location_name IF NOT EXISTS FOR (e:Location) REQUIRE (e.name) IS UNIQUE` has no effect.} {description: `CONSTRAINT location_name FOR (e:Location) REQUIRE (e.name) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT location_name IF NOT EXISTS FOR (l:Location) REQUIRE l.name IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT location_name IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT organization_name IF NOT EXISTS FOR (e:Organization) REQUIRE (e.name) IS UNIQUE` has no effect.} {description: `CONSTRAINT organization_name FOR (e:Organization) REQUIRE (e.name) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT organization_name IF NOT EXISTS FOR (o:Organization) REQUIRE o.name IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT organization_name IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT topic_name IF NOT EXISTS FOR (e:Topic) REQUIRE (e.name) IS UNIQUE` has no effect.} {description: `CONSTRAINT topic_name FOR (e:Topic) REQUIRE (e.name) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT topic_name IF NOT EXISTS FOR (t:Topic) REQUIRE t.name IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT topic_name IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT project_name IF NOT EXISTS FOR (e:Project) REQUIRE (e.name) IS UNIQUE` has no effect.} {description: `CONSTRAINT project_name FOR (e:Project) REQUIRE (e.name) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT project_name IF NOT EXISTS FOR (p:Project) REQUIRE p.name IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT project_name IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT chunk_id IF NOT EXISTS FOR (e:AudioChunk) REQUIRE (e.id) IS UNIQUE` has no effect.} {description: `CONSTRAINT chunk_id FOR (e:AudioChunk) REQUIRE (e.id) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT chunk_id IF NOT EXISTS FOR (c:AudioChunk) REQUIRE c.id IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT chunk_id IF NOT EXISTS
ERROR:services.neo4j_client:Write query execution failed: {code: Neo.DatabaseError.Schema.ConstraintCreationFailed} {message: Unable to create Constraint( type='NODE PROPERTY EXISTENCE', schema=(:AudioChunk {audio_id}) ):
Property existence constraint requires Neo4j Enterprise Edition. Note that only the first found violation is shown.}
ERROR:services.neo4j_client:Query: CREATE CONSTRAINT chunk_audio_id IF NOT EXISTS FOR (c:AudioChunk) REQUIRE c.audio_id IS NOT NULL
ERROR:services.neo4j_client:Parameters: {}
WARNING:services.neo4j_client:Failed to create constraint: {code: Neo.DatabaseError.Schema.ConstraintCreationFailed} {message: Unable to create Constraint( type='NODE PROPERTY EXISTENCE', schema=(:AudioChunk {audio_id}) ):
Property existence constraint requires Neo4j Enterprise Edition. Note that only the first found violation is shown.}
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE CONSTRAINT user_id IF NOT EXISTS FOR (e:User) REQUIRE (e.id) IS UNIQUE` has no effect.} {description: `CONSTRAINT user_id FOR (e:User) REQUIRE (e.id) IS UNIQUE` already exists.} {position: None} for query: 'CREATE CONSTRAINT user_id IF NOT EXISTS FOR (u:User) REQUIRE u.id IS UNIQUE'
INFO:services.neo4j_client:Created constraint: CREATE CONSTRAINT user_id IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX audio_chunk_text IF NOT EXISTS FOR (e:AudioChunk) ON (e.text)` has no effect.} {description: `RANGE INDEX audio_chunk_text FOR (e:AudioChunk) ON (e.text)` already exists.} {position: None} for query: 'CREATE INDEX audio_chunk_text IF NOT EXISTS FOR (c:AudioChunk) ON (c.text)'
INFO:services.neo4j_client:Created index: CREATE INDEX audio_chunk_text IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_mentions IF NOT EXISTS FOR (e:Entity) ON (e.mention_count)` has no effect.} {description: `RANGE INDEX entity_mentions FOR (e:Entity) ON (e.mention_count)` already exists.} {position: None} for query: 'CREATE INDEX entity_mentions IF NOT EXISTS FOR (e:Entity) ON (e.mention_count)'
INFO:services.neo4j_client:Created index: CREATE INDEX entity_mentions IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX chunk_timestamp IF NOT EXISTS FOR (e:AudioChunk) ON (e.timestamp)` has no effect.} {description: `RANGE INDEX chunk_timestamp FOR (e:AudioChunk) ON (e.timestamp)` already exists.} {position: None} for query: 'CREATE INDEX chunk_timestamp IF NOT EXISTS FOR (c:AudioChunk) ON (c.timestamp)'
INFO:services.neo4j_client:Created index: CREATE INDEX chunk_timestamp IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX chunk_date IF NOT EXISTS FOR (e:AudioChunk) ON (e.date)` has no effect.} {description: `RANGE INDEX chunk_date FOR (e:AudioChunk) ON (e.date)` already exists.} {position: None} for query: 'CREATE INDEX chunk_date IF NOT EXISTS FOR (c:AudioChunk) ON (c.date)'
INFO:services.neo4j_client:Created index: CREATE INDEX chunk_date IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX chunk_user_id IF NOT EXISTS FOR (e:AudioChunk) ON (e.user_id)` has no effect.} {description: `RANGE INDEX chunk_user_id FOR (e:AudioChunk) ON (e.user_id)` already exists.} {position: None} for query: 'CREATE INDEX chunk_user_id IF NOT EXISTS FOR (c:AudioChunk) ON (c.user_id)'
INFO:services.neo4j_client:Created index: CREATE INDEX chunk_user_id IF NOT EXISTS
INFO:neo4j.notifications:Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Schema.IndexOrConstraintAlreadyExists} {category: SCHEMA} {title: `CREATE RANGE INDEX entity_user_id IF NOT EXISTS FOR (e:Entity) ON (e.user_id)` has no effect.} {description: `RANGE INDEX entity_user_id FOR (e:Entity) ON (e.user_id)` already exists.} {position: None} for query: 'CREATE INDEX entity_user_id IF NOT EXISTS FOR (e:Entity) ON (e.user_id)'
INFO:services.neo4j_client:Created index: CREATE INDEX entity_user_id IF NOT EXISTS
INFO:services.retrieval.neo4j_retriever:Neo4j retriever initialized successfully
Batches: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:00<00:00, 20.19it/s]
INFO:httpx:HTTP Request: POST http://localhost:8001/api/v2/tenants/default_tenant/databases/default_database/collections/53e9d996-e07f-444e-b166-db3de7ef593b/query "HTTP/1.1 200 OK"
INFO:services.chromadb_manager:Found 0 results for query in audio_transcripts
INFO:services.retrieval.chromadb_retriever:ChromaDB search returned 0 results for query: 'Sur quoi j’ai travaillé cette nuit ?...'
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: normalized_name)} {position: line: 3, column: 50, offset: 72} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 4, column: 36, offset: 146} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 7, column: 32, offset: 240} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: normalized_name)} {position: line: 3, column: 58, offset: 84} for query: '\n            MATCH (start)\n            WHERE start.name =~ $entity_pattern OR start.normalized_name =~ $normalized_pattern\n            MATCH path = (start)-[r*1..2]-(connected)\n            \n            WITH connected, start, path, length(path) as distance\n            RETURN DISTINCT connected, \n                   labels(connected) as types,\n                   distance,\n                   type(relationships(path)[0]) as first_relationship,\n                   count{(connected)-[]->()} + count{(connected)<-[]->()} as connection_count\n            ORDER BY distance ASC, connection_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 5, column: 34, offset: 122} for query: '\n            MATCH (c:AudioChunk)\n            WHERE c.text =~ $text_pattern\n            \n            OPTIONAL MATCH (c)-[:MENTIONS]->(e)\n            RETURN c, collect(DISTINCT {\n                name: e.name,\n                type: labels(e)[0],\n                normalized_name: e.normalized_name\n            }) as entities\n            ORDER BY c.created_at DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: normalized_name)} {position: line: 9, column: 36, offset: 279} for query: '\n            MATCH (c:AudioChunk)\n            WHERE c.text =~ $text_pattern\n            \n            OPTIONAL MATCH (c)-[:MENTIONS]->(e)\n            RETURN c, collect(DISTINCT {\n                name: e.name,\n                type: labels(e)[0],\n                normalized_name: e.normalized_name\n            }) as entities\n            ORDER BY c.created_at DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: created_at)} {position: line: 11, column: 24, offset: 345} for query: '\n            MATCH (c:AudioChunk)\n            WHERE c.text =~ $text_pattern\n            \n            OPTIONAL MATCH (c)-[:MENTIONS]->(e)\n            RETURN c, collect(DISTINCT {\n                name: e.name,\n                type: labels(e)[0],\n                normalized_name: e.normalized_name\n            }) as entities\n            ORDER BY c.created_at DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 2, column: 36, offset: 36} for query: "\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e1)-[r*1..2]-(e2)<-[:MENTIONS]-(c2:AudioChunk)\n            WHERE (c.text =~ $text_pattern OR c2.text =~ $text_pattern OR \n                   e1.name =~ $entity_pattern OR e2.name =~ $entity_pattern)\n            \n            AND c <> c2\n            WITH c, c2, e1, e2, size([rel in r WHERE type(rel) <> 'MENTIONS']) as path_length\n            RETURN DISTINCT c, e1.name as start_entity, e2.name as end_entity, path_length\n            ORDER BY path_length ASC\n            LIMIT $limit\n            "
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 2, column: 69, offset: 69} for query: "\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e1)-[r*1..2]-(e2)<-[:MENTIONS]-(c2:AudioChunk)\n            WHERE (c.text =~ $text_pattern OR c2.text =~ $text_pattern OR \n                   e1.name =~ $entity_pattern OR e2.name =~ $entity_pattern)\n            \n            AND c <> c2\n            WITH c, c2, e1, e2, size([rel in r WHERE type(rel) <> 'MENTIONS']) as path_length\n            RETURN DISTINCT c, e1.name as start_entity, e2.name as end_entity, path_length\n            ORDER BY path_length ASC\n            LIMIT $limit\n            "
INFO:services.retrieval.neo4j_retriever:Neo4j search returned 0 results for query: 'Sur quoi j’ai travaillé cette nuit ?...'
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownPropertyKeyWarning} {category: UNRECOGNIZED} {title: The provided property key is not in the database} {description: One of the property names in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing property name is: normalized_name)} {position: line: 3, column: 50, offset: 72} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 4, column: 36, offset: 146} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
WARNING:neo4j.notifications:Received notification from DBMS server: {severity: WARNING} {code: Neo.ClientNotification.Statement.UnknownRelationshipTypeWarning} {category: UNRECOGNIZED} {title: The provided relationship type is not in the database.} {description: One of the relationship types in your query is not available in the database, make sure you didn't misspell it or that the label is available when you run this statement in your application (the missing relationship type is: MENTIONS)} {position: line: 7, column: 32, offset: 240} for query: '\n            MATCH (e)\n            WHERE e.name =~ $entity_pattern OR e.normalized_name =~ $normalized_pattern\n            MATCH (c:AudioChunk)-[:MENTIONS]->(e)\n            \n            RETURN DISTINCT c, e, \n                   count{(c)-[:MENTIONS]->()} as entity_count,\n                   e.mention_count as entity_frequency\n            ORDER BY entity_frequency DESC, entity_count DESC\n            LIMIT $limit\n            '
INFO:services.context_aggregator_v2:Context aggregation completed: 0 results in 4306.9ms
INFO:services.plugin_manager:No enabled plugins found for type: PluginType.ANALYSIS
INFO:services.plugin_manager:Processed message through 0 plugins
ERROR:services.chat_orchestrator_v2:External LLM generation failed: LLM_API_KEY not configured
ERROR:services.chat_orchestrator_v2:Response generation failed: LLM_API_KEY not configured
INFO:services.chat_orchestrator_v2:Chat response generated in 4307.2ms with 0 sources
INFO:api.chat_router_v2:Chat V2 processed successfully: 83 chars in 4307.2ms
